
// Libraries
#include "src/config.h"                   // user configurations
#include "src/system.h"                   // system functions
#include "src/gpio.h"                     // GPIO functions
#include "src/delay.h"                    // delay functions
#include "src/flash.h"                    // data flash functions
#include "src/usb_cdc.h"                  // USB-CDC serial functions
#include "src/nrf24l01.h"                 // nRF24L01+ functions
#include "src/uart.h"                     // UART header file
#include "src/display.h"                  // Header for display matrix
#include "src/spi.h"
#include "src/adc.h"
#include "src/speaker.h"

#define DEBUG_MODE        0

#define SLAVE_ID          0x01 

#define PROTOCOL_LENGTH   8
#define P_START           0
#define P_TO              1
#define P_FROM            2
#define P_CODE            3
#define P_MESSAGE0        4
#define P_MESSAGE1        5
#define P_CHECKSUM        6
#define P_END             7

// Prototypes for used interrupts
void USB_interrupt(void);
void USB_ISR(void) __interrupt(INT_NO_USB) {
  USB_interrupt();
}

// Global variables
__xdata uint8_t buffer[NRF_PAYLOAD];      // rx/tx buffer
__xdata uint8_t buffer_protocol[PROTOCOL_LENGTH];      // rx/tx buffer
__code uint8_t passcode[4] = {1,4,4,2}; 

uint8_t buttonPressed;
uint8_t buttonLast = 0;
uint8_t updateTimer = 0;
uint8_t clockOn = 0;
uint8_t dot = 1;
uint8_t keyboardActive = 0;
uint8_t keylogged[4];
uint8_t keynum = 0;
uint8_t keyboardtimeout = 10;
uint8_t master_id;
uint8_t askForHelp =0;

// ===================================================================================
// Print Functions and String Conversions
// ===================================================================================

// Convert byte nibble into hex character and print via CDC
void CDC_printNibble(uint8_t nibble) {
  (nibble <= 9) ? (nibble += '0') : (nibble += ('A' - 10));
  CDC_write(nibble);
}

// Convert byte into hex string and print via CDC
void CDC_printByte(uint8_t value) {
  CDC_printNibble (value >> 4);
  CDC_printNibble (value & 0x0F);
}

// Convert an array of bytes into hex string and print via CDC
void CDC_printBytes(uint8_t *ptr, uint8_t len) {
  while(len--) CDC_printByte(*ptr++);
}

// Convert character representing a hex nibble into 4-bit value
uint8_t hexDigit(uint8_t c) {
  if     ((c >= '0') && (c <= '9')) return(c - '0');
  else if((c >= 'a') && (c <= 'f')) return(c - 'a' + 10);
  else if((c >= 'A') && (c <= 'F')) return(c - 'A' + 10); 
  return 0;
}

// Convert string containing a hex byte into 8-bit value
uint8_t hexByte(uint8_t *ptr) {
  return((hexDigit(*ptr++) << 4) + hexDigit(*ptr));
}

// Convert string containing 5 hex bytes into address array
void hexAddress(uint8_t *sptr, uint8_t *aptr) {
  uint8_t i;
  for(i=5; i; i--) {
    *aptr++ = hexByte(sptr);
    sptr += 2;
  }
}

// Print the current NRF settings via CDC
void CDC_printSettings(void) {
  CDC_println("# nRF24L01+ Configuration:");
  CDC_print  ("# Slave ID:   ");  CDC_printByte(NRF_id);         CDC_write('\n');
  CDC_print  ("# RF channel: "); CDC_printByte (NRF_channel);    CDC_write('\n');
  CDC_print  ("# TX address: "); CDC_printBytes(NRF_tx_addr, 5); CDC_write('\n');
  CDC_print  ("# RX address: "); CDC_printBytes(NRF_rx_addr, 5); CDC_write('\n');
  CDC_print  ("# Data rate:  "); CDC_print(NRF_STR[NRF_speed]);  CDC_println("bps");
  CDC_print  ("# Power rate: "); CDC_print(NRF_STR_PW[NRF_power]);CDC_println("bBm");
}

// ===================================================================================
// Data Flash Implementation
// ===================================================================================

// FLASH write user settings
void FLASH_writeSettings(void) {
  uint8_t i;
  FLASH_update(2, NRF_id);
  FLASH_update(3, NRF_channel);
  FLASH_update(4, NRF_speed);
  FLASH_update(5, NRF_power);
  for(i=0; i<5; i++) {
    FLASH_update(6+i, NRF_tx_addr[i]);
    FLASH_update(11+i, NRF_rx_addr[i]);
  }
}

// FLASH read user settings; if FLASH values are invalid, write defaults
void FLASH_readSettings(void) {
  uint8_t i;
  uint16_t identifier = ((uint16_t)FLASH_read(1) << 8) | FLASH_read(0);
  if (identifier == FLASH_IDENT) {
    NRF_id      =  FLASH_read(2);
    NRF_channel =  FLASH_read(3);
    NRF_speed   =  FLASH_read(4);
    NRF_power   =  FLASH_read(5);
    for(i=0; i<5; i++) {
      NRF_tx_addr[i] = FLASH_read(6+i);
      NRF_rx_addr[i] = FLASH_read(11+i);
    }
  }
  else {
    FLASH_update(0, (uint8_t)FLASH_IDENT);
    FLASH_update(1, (uint8_t)(FLASH_IDENT >> 8));
    FLASH_writeSettings();
  }
}

// ===================================================================================
// Command Parser
// ===================================================================================
void parse(void) {
  uint8_t cmd = buffer[1];                          // read the command
  switch(cmd) {                                     // what command?
    case 'i': NRF_id = hexByte(buffer + 2) & 0xFF;
              break;
    case 'c': NRF_channel = hexByte(buffer + 2) & 0x7F;
              break;
    case 't': hexAddress(buffer + 2, NRF_tx_addr);
              break;
    case 'r': hexAddress(buffer + 2, NRF_rx_addr);
              break;
    case 's': NRF_speed = hexByte(buffer + 2);
              if(NRF_speed > 2) NRF_speed = 2;
              break;
    case 'p': NRF_power = hexByte(buffer + 2);
              if(NRF_power > 3) NRF_power = 3;
              break;
    default:  break;
  }
  NRF_configure();                                  // reconfigure the NRF
  CDC_printSettings();                              // print settings via CDC
  FLASH_writeSettings();                            // update settings in data flash
}

// Print help
void printHelp(){
  CDC_println("Help");
  CDC_println("!        - prints configuration");
  CDC_println("?        - prints help");
  CDC_println("i        - prints slave ID");
  CDC_println("!iXX     - change ID");
  CDC_println("!cXX     - change channel");
  CDC_println("!tXXXXXX - change transmit address");
  CDC_println("!rXXXXXX - change receive address");
  CDC_println("!sXX     - change speed");
  CDC_println("!pXX     - change power");
}

void bufferStringer(uint8_t* str){
  uint8_t i =0;
  while(*str){
    buffer[i] = *str;
    i++;
    str++;
  }
}

uint8_t checkPasscode(){
  uint8_t result = 1;
  for(uint8_t i=0; i<4; i++){
    if(keylogged[i]!=passcode[i]){
      result = 0;
      break;
    }
  }
  return result;
}

void sendHelpMaster(){
  buffer_protocol[0] = 0x0A;
  buffer_protocol[1] = master_id;
  buffer_protocol[2] = NRF_id;
  buffer_protocol[3] = 0x07;
  buffer_protocol[4] = 0;
  buffer_protocol[5] = 0;
  buffer_protocol[6] = buffer[1] + buffer[2] + buffer[3] + buffer[4]+ buffer[5];
  buffer_protocol[7] = 0x0D;

  NRF_writePayload(buffer_protocol, PROTOCOL_LENGTH);           // send the buffer via NRF

}

void master_pause(){
  clockOn = 0;

  buffer_protocol[0] = 0x0A;
  buffer_protocol[1] = master_id;
  buffer_protocol[2] = SLAVE_ID;
  buffer_protocol[3] = 0xA6;
  buffer_protocol[4] = 0;
  buffer_protocol[5] = 0;
  buffer_protocol[6] = buffer[1] + buffer[2] + buffer[3] + buffer[4]+ buffer[5];
  buffer_protocol[7] = 0x0D;

  NRF_writePayload(buffer_protocol, PROTOCOL_LENGTH);           // send the buffer via NRF

}

void master_start(){
  clockOn = 1;

  buffer_protocol[0] = 0x0A;
  buffer_protocol[1] = master_id;
  buffer_protocol[2] = SLAVE_ID;
  buffer_protocol[3] = 0xA5;
  buffer_protocol[4] = 0;
  buffer_protocol[5] = 0;
  buffer_protocol[6] = buffer[1] + buffer[2] + buffer[3] + buffer[4]+ buffer[5];
  buffer_protocol[7] = 0x0D;

  NRF_writePayload(buffer_protocol, PROTOCOL_LENGTH);           // send the buffer via NRF

}

void master_resetTime(){
  clockOn = 0;
  display_timeseconds = 0;
  fillBufferTime();
  displayDigits(1);

  buffer_protocol[0] = 0x0A;
  buffer_protocol[1] = master_id;
  buffer_protocol[2] = SLAVE_ID;
  buffer_protocol[3] = 0xA4;
  buffer_protocol[4] = 0;
  buffer_protocol[5] = 0;
  buffer_protocol[6] = buffer[1] + buffer[2] + buffer[3] + buffer[4]+ buffer[5];
  buffer_protocol[7] = 0x0D;

  NRF_writePayload(buffer_protocol, PROTOCOL_LENGTH);           // send the buffer via NRF

}

void master_setTime(){
  display_timeseconds = buffer[P_MESSAGE1];
  display_timeseconds = display_timeseconds<<8;
  display_timeseconds |= buffer[P_MESSAGE0];
  fillBufferTime();
  displayDigits(1);

  buffer_protocol[0] = 0x0A;
  buffer_protocol[1] = master_id;
  buffer_protocol[2] = SLAVE_ID;
  buffer_protocol[3] = 0xA3;
  buffer_protocol[4] = 0;
  buffer_protocol[5] = 0;
  buffer_protocol[6] = buffer[1] + buffer[2] + buffer[3] + buffer[4]+ buffer[5];
  buffer_protocol[7] = 0x0D;

  NRF_writePayload(buffer_protocol, PROTOCOL_LENGTH);           // send the buffer via NRF

}

void master_replyTime(){
  buffer_protocol[0] = 0x0A;
  buffer_protocol[1] = master_id;
  buffer_protocol[2] = SLAVE_ID;
  buffer_protocol[3] = 0xA2;
  buffer_protocol[4] = display_timeseconds&0xFF;
  buffer_protocol[5] = (display_timeseconds>>8)&0xFF;
  buffer_protocol[6] = buffer[1] + buffer[2] + buffer[3] + buffer[4]+ buffer[5];
  buffer_protocol[7] = 0x0D;

  NRF_writePayload(buffer_protocol, PROTOCOL_LENGTH);           // send the buffer via NRF
}

void master_replyHello(){

  buffer_protocol[0] = 0x0A;
  buffer_protocol[1] = master_id;
  buffer_protocol[2] = SLAVE_ID;
  buffer_protocol[3] = 0xA1;
  buffer_protocol[4] = 0;
  buffer_protocol[5] = 0;
  buffer_protocol[6] = buffer[1] + buffer[2] + buffer[3] + buffer[4]+ buffer[5];
  buffer_protocol[7] = 0x0D;

  NRF_writePayload(buffer_protocol, PROTOCOL_LENGTH);           // send the buffer via NRF
}

uint8_t checksumCorrect(){
  uint8_t ch = 0;
  for(uint8_t i=P_TO; i<P_CHECKSUM; i++){
    ch += buffer[i];
  }
  if(ch == buffer[P_CHECKSUM]){
    return 1;
  } else {
    return 0;
  }
}


void processBuffer(uint8_t length){
  if(length==PROTOCOL_LENGTH){
    if((buffer[P_START] == 0x0A)&&(buffer[P_END] == 0x0D)){
      if(checksumCorrect()){
        if((buffer[P_TO] == SLAVE_ID)||(buffer[P_TO] == 0)){
          uint8_t master_id = buffer[P_FROM];
          switch(buffer[P_CODE]){
            case 1:
              master_replyHello();
              if(DEBUG_MODE){
                CDC_println("Replayed Hello");
              }              
              break;
            case 2:
              master_replyTime();
              if(DEBUG_MODE){
                CDC_println("Replayed Time");
              }              
              break;
            case 3:
              master_setTime();
              if(DEBUG_MODE){
                CDC_println("Set Time");
              }
              break;
            case 4:
              master_resetTime();
              if(DEBUG_MODE){
                CDC_println("Time reseted");
              }
              break;
            case 5:
              master_start();
              if(DEBUG_MODE){
                CDC_println("Timer started");
              }
              
              break;
            case 6:
              master_pause();
              if(DEBUG_MODE){
                CDC_println("Time paused");
              }
              break;
            case 0xA7:
              askForHelp = 0;
              if(DEBUG_MODE){
                CDC_println("Help request acknowledged");
              }  
              break;
            default:
            if(DEBUG_MODE){
                CDC_println("Unknown Code");
            }  
          }
        } else {
          if(DEBUG_MODE){
            CDC_println("Incorrect Slave ID");
          }  
        }
      } else {
        if(DEBUG_MODE){
          CDC_println("Incorrect Checksum");
        }
      }

    }else {
      if(DEBUG_MODE){
       CDC_println("Incorrect start or ending character");
      }
    }
  } else {
    if(DEBUG_MODE){
      CDC_println("Incorrect Length");
    }  
  }
}
// ===================================================================================
// Main Function
// ===================================================================================
void main(void) {
  // Variables
  uint8_t buflen;                                   // data length in buffer
  uint8_t bufptr;                                   // buffer pointer


  CLK_config();                                       // configure system clock
  DLY_ms(5);
  SPI_init();

  FLASH_readSettings();                             // read user settings from flash
  CDC_init();                                       // init USB CDC
  NRF_init();                                       // init nRF24L01+

  SPI_init();
  initialize();
  setTime(0,0);
  displayDigits(1);                      
  DLY_ms(100);
  ADC_BUTTONSInit(ADC_SPEED, ADC_CHANNEL);
  SPEAKER_Init();
                                                             
	
  while(1){        
      buttonPressed = ADC_BUTTONSGetButton(ADC_CHANNEL);                                                       
      if((buttonLast!=buttonPressed)&&(buttonPressed!=0)){
        if(buttonPressed == 5){
          askForHelp = 1;
        }

        if(keyboardActive){
          switch(buttonPressed){
            case 1: clockOn = 1; break;
            case 2: clockOn = 0; break;
            case 3: 
              incrementTime(900); 
              displayDigits(1);
              break;
            case 4: 
              decrementTime(900); 
              displayDigits(1);
              break;
            default:
            
          }
        }
        
        if(!keyboardActive){
          if(buttonPressed == passcode[0]){
            keynum = 1;
            keylogged[0] = buttonPressed;
          } else {
            keylogged[keynum] = buttonPressed;
            keynum++;
            if(keynum == 4){
              if(checkPasscode()){
                keyboardActive = 1;
                keyboardtimeout = 2000;
                PIN_low(PIN_LED);
                SPEAKER_Generate(1);
              } else {
                keynum = 0;
                keylogged[0]=0;
                keylogged[1]=0;
                keylogged[2]=0;
                keylogged[3]=0;
              }
            } 
          }
        }
      } 
      buttonLast = buttonPressed;
      
      updateTimer++;
      
      if(keyboardActive){
         
        keyboardtimeout--;
        if(!keyboardtimeout){
          keylogged[0]=0;
          keylogged[1]=0;
          keylogged[2]=0;
          keylogged[3]=0;
          keyboardActive = 0;
          PIN_high(PIN_LED);
        }
      }
      
      if(updateTimer >= 20){
        updateTimer = 0;
        dot = !dot;
        if(clockOn){
          if(dot){
            decrementTime(1);
            if(display_timeseconds==0){
              clockOn = 0;
              SPEAKER_Generate(1);
            }
          }
          displayDigits(dot);
        }
        
        if(askForHelp){
          sendHelpMaster();
          if(DEBUG_MODE){
                CDC_println("Sending Help");
          }
        }
      }

    if(NRF_available()) {                           // something coming in via NRF?
      PIN_low(PIN_LED);                             // switch on LED
      bufptr = 0;                                   // reset buffer pointer
      buflen = NRF_readPayload(buffer);             // read payload into buffer
      processBuffer(buflen);
      // while(buflen--) CDC_write(buffer[bufptr++]);  // write buffer via USB CDC
     // CDC_flush();                                  // flush CDC
    }

    buflen = CDC_available();                       // get number of bytes in CDC IN
    if(buflen) {                                    // something coming in via USB?
      bufptr = 0;                                   // reset buffer pointer
      if(buflen > NRF_PAYLOAD) buflen = NRF_PAYLOAD;// restrict length to max payload
      while(buflen--) buffer[bufptr++] = CDC_read();// get data from CDC
      if(buffer[0] == CMD_IDENT) parse();           // is it a command? -> parse
      if(buffer[0] == HELP_IDENT) printHelp();      // prints help
      else {                                        // not a command?
        
        NRF_writePayload(buffer, bufptr);           // send the buffer via NRF
      }
    }

    

    DLY_ms(25);   

  }
  
}